[{"title":"Personal Blog Manage System","url":"/2022/04/03/Personal Blog Manage System/","content":"\n# Personal Blog Manage System\n\n\n\n## 1. Introduction\n\nThis project is a blog manage system based on Node.js and basic JavaScript. To build up this project you need basic concept about:\n\n- Frontend: HTML, CSS, JavaScript\n- Backend: Node.js\n- Database: MySQL\n\nThis manage system implements basic functions like personal account management, article publishment, article category management.\n\nclick here to download it:\n\nhttps://github.com/ARIOS00/Blog-Manage-System-Demo.git\n\n<!-- more -->\n\n## 2. Run the Project\n\nAfter downloading this project, you can run a terminal in the root file (Make sure you install Node.js) and input the command:\n\n```bash\nnode app.js\n```\n\nNow the server is running at port 2000 (Make sure this port is not occupied by other processes). Then click the link:\n\nhttp://127.0.0.1:2000/index.html\n\nNow you enter the login page. \n\nBefore operating the pages ensure that all third party packages are installed correctly and relative database is established!!!!\n\n\n\n## 3. Build the Backend Part of the Project\n\n### 1. Initialization\n\n1. First, create a root folder named *ManageSystem*. Then open a terminal here and input:\n\n```bash\nnpm init -y \n```\n\nto initialize *package.json* in this folder. \n\n2. Install all packages below you need in this project by using: \n\n```bash\nnpm i xxx\n```\n\n\"@escook/express-joi\": \"^1.1.1\",\n\n  \"bcryptjs\": \"^2.4.3\",\n\n  \"cors\": \"^2.8.5\",\n\n  \"express\": \"^4.17.3\",\n\n  \"express-jwt\": \"^6.1.1\",\n\n  \"joi\": \"^17.6.0\",\n\n  \"jsonwebtoken\": \"^8.5.1\",\n\n  \"multer\": \"^1.4.2\",\n\n  \"multiparty\": \"^4.2.3\",\n\n  \"mysql\": \"^2.18.1\"\n\n3. Create *app.js* in the root folder as the main interface of the backend part of project. And write codes below to initialize it. \n\n   ```javascript\n   // import express module\n   const express = require('express');\n   // import CORS middleware module\n   const cors = require('cors');\n   // initialize server\n   const app = express();\n   \n   //register cors as global middleware\n   app.use(cors());\n   \n   //register this middleware to parse application/x-www-form-urlencoded data \n   app.use(express.urlencoded({ extended: false }))\n   \n   // run server at port 2000\n   app.listen(3007, function () {\n     console.log('api server running at 2000');\n   })\n   ```\n\n4. Create *router* folder in root folder to store all router modules. Create *router_handler* folder to store all router handler functions modules.\n\n5. Create *user.js* in router folder as the basic account management router interface. Then write codes below:\n\n   ```javascript\n   const express=require('express');\n   routerHandler=require('../router_handler/user');\n   \n   //create router object\n   const router=express.Router();\n   \n   //router for register new account\n   router.post('/register',routerHandler.register);\n   \n   //router for login\n   router.post('/login',routerHandler.login);\n   \n   //router for jumping to register page\n   router.get('/register.html',)\n   \n   //export this module\n   module.exports=router;\n   ```\n\n6. Import *router* module in *app.js*:\n\n   ```javascript\n   const router = require('./router/user')\n   //register router module and add '/api' to initial router path\n   app.use('/api', router)\n   ```\n\n7. Create *user.js* in *router_handler* folder and define router handler functions:\n\n   ```javascript\n   exports.register = (req, res) => {\n   }\n   \n   exports.login = (req, res) => {\n   }\n   ```\n\n\n\n### 2. Register and Login\n\n#### 1. Initialize relative database\n\n1. Create a database named *mydb01* in MySQL. Then create a new table named *userinfo*:\n\n   ![image-20220414161431078](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220414161431078.5k072qf5pf40.webp)\n\n2. Create *db* folder and create *index.js* in it. Write codes below:\n\n   ```javascript\n   const mysql=require('mysql');\n   \n   const db=mysql.createPool({\n       host: '127.0.0.1',\n       user: 'root',\n       password: 'xxxxxxxxxx', //here is your password of MySQL\n       database: 'mydb01'\n   })\n   \n   module.exports=db;\n   ```\n\n#### 2. Initialize personal information verification module\n\n1. Using third party packages (*joi* and *escook/express-joi*) to preprocedure user's register and login information. Create */schema/user.js* in root folder. Write codes below:\n\n   ```javascript\n   const joi=require('joi');\n   \n   //verification rules of username and password\n   const username_lr=joi.string().alphanum().min(1).max(15).required();\n   const username_ui=joi.string().alphanum().min(1).max(15);\n   const password=joi.string().pattern(/^\\S{6,}$/).required();\n   const email=joi.string().pattern(/^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/);\n   const nickname=joi.string();\n   \n   exports.regSchema={\n       body:{\n           username:username_lr,\n           password,\n           email\n       }\n   }\n   ```\n\n2. Change codes in */router/user.js* like this: \n\n   ```javascript\n   const express=require('express');\n   const routerHandler=require('../router_handler/user');\n   const expressJoi=require('@escook/express-joi');\n   const {regSchema}=require('../schema/user');\n   \n   const router=express.Router();\n   \n   router.post('/register',expressJoi(regSchema),routerHandler.register);\n   \n   router.post('/login',expressJoi(regSchema),routerHandler.login);\n   \n   router.get('/register.html',)\n   \n   module.exports=router;\n   ```\n\n3. Simplify error report process: using *res.send({status:1, msg:xxxxxx})* to report errors is inconvenient. Define a *res.cc* function in *app.js* to simplify it and register it as a global middleware:\n\n   ```javascript\n   app.use(function (req, res, next) {\n     // status=0 success\n     // status=1 fail (default)\n     res.cc = function (err, status = 1) {\n       res.send({\n         status,\n         //if err is an error object or just a string\n         message: err instanceof Error ? err.message : err,\n       })\n     }\n     next()\n   })\n   ```\n\n   \n\n4. Register a global middleware to return validation failure information to client in *app.js*:\n\n   ```javascript\n   const joi=require('joi');\n   \n   app.use((err,req,res,next)=>{\n       if(err instanceof joi.ValidationError)\n           return res.cc(err);\n       if(err.name===\"UnauthorizedError\")\n           return res.cc(\"id authorization failed!\")\n   })\n   ```\n\n#### 3. Register account API\n\n1. Change *register* function in */router_handler/user.js*:\n\n   ```javascript\n   const bcryptjs=require('bcryptjs');\n   \n   exports.register=(req,res)=>{\n       //if username exists\n       db.query('select * from userinfo where username=?',req.body.username,(err,results)=>{\n           if(err) \n               return res.cc(err);\n           if(results.length>0)\n               return res.cc(\"username already exists!\");\n           //use bcryptjs module to encrypt user's password while registering \n           let bcryptPassword=bcryptjs.hashSync(req.body.password,10);\n           \n           //insert new user\n           let sql='insert into userinfo (username,password,email) values(?,?,?)';\n           db.query(sql,[req.body.username,bcryptPassword,req.body.email],(err,results)=>{\n               if(err) \n                   return res.cc(err);\n               if(results.affectedRows!=1)\n                   return res.cc(\"register failed! please try again later!\");\n               res.cc(\"register success!\",0);\n           })\n       })\n   }\n   ```\n\n#### 4. Login API\n\n1. Change *login* function in */router_handler/user.js*:\n\n   ```javascript\n   const bcryptjs=require('bcryptjs');\n   const jwt=require('jsonwebtoken');\n   const config=require('../config');\n   \n   exports.login=(req,res)=>{\n       //if username exist\n       db.query('select * from userinfo where username=?',req.body.username,(err,results)=>{\n           if(err)\n               return res.cc(err);\n           if(results.length!=1)\n               return res.cc(\"username not found!\");\n           \n           //if password correct\n           //use bcryptjs module to parse password encrypted while registering\n           if(!bcryptjs.compareSync(req.body.password,results[0].password))\n               return res.cc(\"password incorrect!\");\n   \n           //use userinfo to generate Token\n           //remember to exclude some private information such as password and user's\n           //avatar to ensure sercurity!!\n           const user={...results[0],password:'',user_pic:''};\n           //config is a customized module to generate JWT secret key\n           const tokenStr=jwt.sign(user,config.jwtSecretKey,{expiresIn:config.expiresIn});\n   \t\t//send Token string and user information of this account back to the client\n           res.send({\n               status:0,\n               msg:\"login success!\",\n               token:\"Bearer \"+tokenStr,\n               userinfo:{\n                   username:results[0].username,\n                   nickname:results[0].nickname,\n                   email:results[0].email\n               }\n           })\n       })\n   }\n   ```\n\n2. Create *config.js* in root folder:\n\n   ```javascript\n   module.exports={\n       jwtSecretKey:\"Hanlin\",\n       expiresIn:'2h'\n   }\n   ```\n\n3. Configure Token middleware before register router in *app.js*:\n\n   ```javascript\n   const expressJWT=require('express-jwt');\n   const config=require('./config');\n   \n   //use unless() to define which routers need not Token verification\n   app.use(expressJWT({secret:config.jwtSecretKey,algorithms:['HS256']}).unless({path:[/^\\/api/]}));\n   \n   app.use('/api',router);\n   \n   app.use((err,req,res,next)=>{\n       if(err instanceof joi.ValidationError)\n           return res.cc(err);\n       if(err.name===\"UnauthorizedError\")\n           return res.cc(\"id authorization failed!\")\n   })\n   ```\n\n\n\n### 3. Personal Center\n\n#### 1. Get user information\n\n1. Create */router/userinfo.js* router module\n\n   ```javascript\n   const express = require('express')\n   const router = express.Router()\n   \n   //router for getting user information\n   router.get('/userinfo', (req, res) => {\n     res.send('ok')\n   })\n   \n   module.exports = router\n   ```\n\n2. Import it in *app.js*:\n\n   ```javascript\n   const userinfoRouter=require('./router/userinfo')\n   \n   app.use('/my',userinfoRouter);\n   ```\n\n   Attention! All routers that start with '/my' need pass the Token verification first!\n\n3. Create */router_handler/userinfo.js* and define function to process request of getting user information:\n\n   ```javascript\n   const db=require('../db/index');\n   \n   exports.getUserinfo=(req,res)=>{\n       //find the relative account in database\n       const sql=\"select id,username,nickname,email,user_pic from userinfo where id=?\";\n       db.query(sql,req.user.id,(err,results)=>{\n           if(err)\n               return res.cc(err);\n           //if the user information does not exist, then return an error\n           if(results.length!==1)\n               return res.cc(\"cannot get userinfo!\");\n           //if the user information exists, then return it back to the client\n           res.send({\n               status:0,\n               msg:\"get userinfo success!\",\n               data:results[0]\n           })\n       })\n   }\n   ```\n\n4. Import it in */router/userinfo.js*:\n\n   ```javascript\n   const userinfoHandler=require('../router_handler/userinfo');\n   ```\n\n   \n\n#### 2. Update user information\n\n1. Add a new router in */router/userinfo.js*:\n\n   ```javascript\n   router.post('/userinfo',expressJoi(updateUserinfoSchema),userinfoHandler.updateUserinfo);\n   ```\n\n2. Define function to process request of updating user information in  */router_handler/userinfo.js*:\n\n   ```javascript\n   exports.updateUserinfo=(req,res)=>{\n       const sql=\"update userinfo set ? where id=?\";\n       db.query(sql,[req.body,req.user.id],(err,results)=>{\n           if(err)\n               return res.cc(err);\n           if(results.affectedRows!==1)\n               return res.cc(\"update userinfo failed!\");\n           res.cc(\"update userinfo success!\",0);\n       })\n   }\n   ```\n\n3. Export a new verification rule for updating user information in */schema/user.js*:\n\n   ```javascript\n   exports.updateUserinfoSchema={\n       body:{\n           username:username_ui,\n           nickname,\n           email\n       }\n   }\n   ```\n\n4. Apply this new verification rule in */router/userinfo.js*:\n\n   ```javascript\n   const expressJoi=require('@escook/express-joi');\n   const {updateUserinfoSchema}=require('../schema/user');\n   \n   router.post('/userinfo',expressJoi(updateUserinfoSchema),userinfoHandler.updateUserinfo);\n   ```\n\n#### 3. Reset password\n\n1. Add a new router in */router/userinfo.js*:\n\n   ```javascript\n   router.post('/updatePassword',expressJoi(updatePasswordSchema),userinfoHandler.updatePassword);\n   ```\n\n2. Define the verification rule for resetting password in */schema/user.js*:\n\n   ```javascript\n   exports.updatePasswordSchema={\n       body:{\n           oldPwd:password,\n           //new password must be different from old one\n           newPwd:joi.not(joi.ref('oldPwd')).concat(password)\n       }\n   }\n   ```\n\n3. Apply this new verification rule in */router/userinfo.js*. All codes in this file are shown below:\n\n   ```javascript\n   const express=require('express');\n   const userinfoHandler=require('../router_handler/userinfo');\n   const expressJoi=require('@escook/express-joi');\n   const {updateUserinfoSchema,updatePasswordSchema}=require('../schema/user');\n   \n   const router=express.Router();\n   \n   router.get('/userinfo',userinfoHandler.getUserinfo);\n   \n   router.post('/userinfo',expressJoi(updateUserinfoSchema),userinfoHandler.updateUserinfo);\n   \n   router.post('/updatePassword',expressJoi(updatePasswordSchema),userinfoHandler.updatePassword);\n   \n   module.exports=router;\n   ```\n\n4. Define handle function of resetting password in */router_handler/userinfo.js*:\n\n   ```javascript\n   const bcrypt=require('bcryptjs');\n   \n   exports.updatePassword=(req,res)=>{\n       //find the user according to the id hidden in Token before verifying the password\n       const sql=\"select * from userinfo where id=?\";\n       db.query(sql,req.user.id,(err,results)=>{\n           if(err)\n               return res.cc(err); \n           //if the old password is correct\n           if(!bcrypt.compareSync(req.body.oldPwd,results[0].password))\n               return res.cc(\"password incorrect!\");\n           //update password if the old password is correct\n           const sql=\"update userinfo set password=? where id=?\";\n           const newPwd=bcrypt.hashSync(req.body.newPwd,10);\n           db.query(sql,[newPwd,req.user.id],(err,results)=>{\n               if(err)\n                   return res.cc(err);\n               if(results.affectedRows!==1)\n                   return res.cc(\"update password failed!\");\n               res.cc(\"update password success!\",0);\n           })\n       })\n   }\n   ```\n\n\n\n### 4. Article Category Management\n\n#### 1. Initialize relative database\n\n1. Create a new table named *userarticle* for *mydb01*:\n\n   ![image-20220414200318629](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220414200318629.10uayahiytx.webp)\n\n#### 2. Initialize router module\n\n1. Create */router/artcate.js*:\n\n   ```javascript\n   const express = require('express')\n   const router = express.Router()\n   \n   module.exports = router\n   ```\n\n2. Import this router in *app.js*:\n\n   ```javascript\n   const artcateRouter=require('./router/artcate');\n   \n   app.use('/my/article',artcateRouter);\n   ```\n\n3. Create */router_handler/artcate.js*. Then import it in */router/artcate.js*:\n\n   ```javascript\n   const artcateHandler=require('../router_handler/artcate');\n   ```\n\n#### 3. Get article categories\n\n1. Define the handler function of getting categories in */router_handler/artcate.js*:\n\n   ```javascript\n   const db=require('../db/index');\n   \n   exports.getArtcate=(req,res)=>{\n       //get all categories in database and order them by id\n       const sql=\"select * from userarticle where is_delete=0 order by id asc\";\n       db.query(sql,(err,results)=>{\n           if(err)\n               return res.cc(err);\n           //return the results to the client\n           res.send({\n               status:0,\n               msg:\"get article categories success!\",\n               data:results\n           })\n       })\n   }\n   ```\n\n2. Create the router of getting categories in */router/artcate.js*:\n\n   ```javascript\n   router.get('/cates',artcateHandler.getArtcate);\n   ```\n\n#### 4. Add article category\n\n1. Create */schema/artcate.js* and define a new verification rule for adding category:\n\n   ```javascript\n   const joi=require('joi');\n   \n   const name=joi.string().required();\n   const alias=joi.string().alphanum().required();\n   const id=joi.number().integer().min(1).required();\n   \n   exports.addArtcateSchema={\n       body:{\n           name,\n           alias\n       }\n   }\n   \n   ```\n\n2. Create route for adding category in */router/artcate.js* and apply the new verification rule:\n\n   ```javascript\n   const express=require('express');\n   const artcateHandler=require('../router_handler/artcate');\n   const expressJoi=require('@escook/express-joi');\n   const {addArtcateSchema}=require('../schema/artcate');\n   \n   router.post('/addcate',expressJoi(addArtcateSchema),artcateHandler.addArtcate);\n   ```\n\n3. Define the handle function of adding category in */router_handler/artcate.js:*\n\n   ```javascript\n   exports.addArtcate=(req,res)=>{\n       //check if the category name already exists\n       const sql=\"select * from userarticle where name=? and is_delete=0\";\n       db.query(sql,req.body.name,(err,results)=>{\n           if(err)\n               return res.cc(err);\n           if(results.length===1)\n               return res.cc(\"name already exists!\");\n           const sql=\"insert into userarticle set ?\"\n           db.query(sql,req.body,(err,results)=>{\n               if(err)\n                   return res.cc(err);\n               if(results.affectedRows!==1)\n                   return res.cc(\"add category failed!\");\n               res.send({\n                   status:0,\n                   msg:\"add category success!\",\n                   data:results\n               })\n           })\n       })\n   }\n   ```\n\n#### 5. Delete article category\n\n1. Deleting category is based on user's id. Export a new verification rule for deleting category in */schema/artcate.js*:\n\n   ```javascript\n   exports.deleteArtcateSchema={\n       params:{\n           id\n       }\n   }\n   ```\n\n2. Add router in */router/artcate.js* for deleting:\n\n   ```javascript\n   const {addArtcateSchema,deleteArtcateSchema}=require('../schema/artcate');\n   \n   router.get('/deletecates/:id',expressJoi(deleteArtcateSchema),artcateHandler.deletecateById);\n   ```\n\n3. Define handler function of deleting in */router_handler/artcate.js*:\n\n   ```javascript\n   exports.deletecateById=(req,res)=>{\n   \t//id is hidden in request body params of POST request for deleting category\n       const sql=\"update userarticle set is_delete=1 where id=?\";\n       db.query(sql,req.params.id,(err,results)=>{\n           if(err)\n               return res.cc(err);\n           if(results.affectedRows!==1)\n               return res.cc(\"delete category failed!\");\n           res.cc(\"delete category success!\");\n       })\n   }\n   ```\n\n#### 6. Edit article category\n\n1. Export a new verification rule for editing category in */schema/artcate.js*:\n\n   ```javascript\n   exports.updateArtcateSchema={\n       body:{\n           id,\n           name,\n           alias\n       }\n   }\n   ```\n\n2. Add router in */router/artcate.js*. And the final version of */router/artcate.js* is shown as followed:\n\n   ```javascript\n   const express=require('express');\n   const artcateHandler=require('../router_handler/artcate');\n   const expressJoi=require('@escook/express-joi');\n   const {addArtcateSchema,deleteArtcateSchema,updateArtcateSchema}=require('../schema/artcate');\n   \n   \n   const router=express.Router();\n   \n   router.get('/cates',artcateHandler.getArtcate);\n   \n   router.post('/addcate',expressJoi(addArtcateSchema),artcateHandler.addArtcate);\n   \n   router.get('/deletecates/:id',expressJoi(deleteArtcateSchema),artcateHandler.deletecateById);\n   \n   router.post('/updatecate',expressJoi(updateArtcateSchema),artcateHandler.updatecateById);\n   \n   module.exports=router;\n   ```\n\n3. Define handler function of editing in */router_handler/artcate.js*:\n\n   ```javascript\n   exports.updatecateById=(req,res)=>{\n       //check if the new name of category exists\n       const sql=\"select * from userarticle where id!=? and is_delete=0 and name=?\";\n       db.query(sql,[req.body.id,req.body.name],(err,results)=>{\n           if(err)\n               return res.cc(err);\n           if(results.length!==0)\n               return res.cc(\"name already exists!\");\n           //update database with new data after editing\n           const sql=\"update userarticle set ? where id=?\"\n           db.query(sql,[req.body,req.body.id],(err,results)=>{\n               if(err)\n                   return res.cc(err);\n               if(results.affectedRows!==1)\n                   return res.cc(\"update category failed!\");\n               res.cc(\"update category success!\")\n           })\n       })\n   }\n   ```\n\n\n\n### 5. Article Publishment Management\n\n#### 1. Initialize relative database\n\n1. Create a new table name *articles*:\n\n   ![image-20220414204857057](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220414204857057.1fzf8cndpof4.webp)\n\n#### 2. Initialize router module\n\n1. Create /router/*article.js*:\n\n   ```javascript\n   const express = require('express')\n   const router = express.Router()\n   \n   module.exports = router\n   ```\n\n2. Import this in *app.js*:\n\n   ```javascript\n   const articleRouter=require('./router/article');\n   \n   app.use('/my/article',artcateRouter);\n   ```\n\n3. Create */router_handler/article.js*. Then import it in */router/article.js*:\n\n   ```javascript\n   const articleHandler=require('../router_handler/article');\n   ```\n\n#### 3. Verification rule for publishment\n\n1. Define handler function for publishment in */router_handler/article.js*:\n\n   ```javascript\n   const path=require('path');\n   const db=require('../db/index');\n   \n   //import a module to process form data in POST request body\n   //the data in request body is divded into file and text\n   //file is the cover of the article for publishment\n   //text is the data mentioned in /schema/article.js\n   const multiparty=require('multiparty')\n   \n   exports.addArticle=(req,res)=>{\n       //define a form object to parse form data from client\n       let form = new multiparty.Form();\n       //parse form data\n       form.parse(req,(err, fields, files) => {\n           if(err)\n               return res.cc(err);\n           //check if cover is chosen\n           if(files.cover_img)\n               return res.cc(\"please choose cover!\");\n           //check if title, category, content are empty\n           if(!(fields.cate[0] && fields.title[0] && fields.content[0]))\n               return res.cc(\"title, category, content cannot be empty!\");\n           //check if category of the article exists\n           const sql=\"select * from userarticle where name=? and is_delete=0\"\n           db.query(sql,fields.cate[0],(err,results)=>{\n               if(err)\n                   return res.cc(err);\n               if(results.length!==1)\n                   return res.cc(\"the category you selected does not exist!\");\n               //when all conditions are satisfied, use an object to store form data from client\n               const articleInfo={\n                   title:fields.title[0],\n                   cate:fields.cate[0],\n                   content:fields.content[0],\n                   state:fields.state[0],\n                   cover_img:path.join('/uploads',files.cover_img[0].originalFilename),\n                   pub_date:new Date(),\n                   author_id:req.user.id\n               }\n   \n               //insert information about the article into MySQL\n               const sql=\"insert into articles set ?\";\n               db.query(sql,articleInfo,(err,results)=>{\n                   if(err)\n                       return res.cc(err);\n                   if(results.affectedRows!==1)\n                       return res.cc(\"publish article failed!\");\n                   res.cc(\"publish article success!\");\n               })\n           })\n      })\n   }\n   ```\n\n2. Invoke this function in /router/article.js:\n\n   ```javascript\n   router.post('/add',articleHandler.addArticle);\n   ```\n\n\n\n\n\n## 4. Build the Frontend Part of the Project\n\n### 1. Login Page\n\n1. Create *Frontend* folder in root folder. Then, create /Frontend/index.html:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n       <head>\n           <meta charset=\"UTF-8\">\n           <title>index</title>\n           <meta name=\"description\" content=\"manage system based on Node\"/>\n           <meta name=\"keywords\" content=\"1,1,1\"/>\n           <link rel=\"stylesheet\" href=\"http://127.0.0.1:2000/CSS/index.css\">\n           <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js\"></script>\n       </head>\n       <body>\n           <div class=\"login\">\n               <div class=\"SignIn\">Log in</div>\n               <div class=\"user\">\n                   <input type=\"text\" id=\"username\" placeholder=\"username: \">\n               </div>\n               <div class=\"user\">\n                   <input type=\"password\" id=\"password\" placeholder=\"password: \">\n               </div>\n               <button class=\"loginBtn\" id=\"loginBtn\">Log in</button>\n               <!--Jump to register page-->\n               <div class=\"noAccount\">Don't have an account? <a href=\"http://127.0.0.1:2000/register.html\" method=\"GET\" class=\"register\">Register</a></div>\n           </div>\n       </body>\n       <script src=\"http://127.0.0.1:2000/JS/index.js\"></script>\n   </html>\n   ```\n\n2. Create */Frontend/CSS/index.css* to customize the style of login page:\n\n   ```css\n   /* clear the default style */\n   * {\n       margin: 0;\n       padding: 0;\n       box-sizing: border-box;\n       border: none;\n       outline: none;\n       font-family: Verdana, Geneva, Tahoma, sans-serif;\n   }\n   li {\n       list-style: none;\n   }\n   \n   /* define body size, layout, background */\n   body {\n       min-height: 100vh;\n       display: flex;\n       justify-content: center;\n       align-items: center;\n       background: linear-gradient(45deg,rgb(104, 244, 247),rgb(251, 72, 48));\n   }\n   \n   .login {\n       /* size */\n       height: 340px;\n       width: 360px;\n       /* location and layout */\n       position: relative;\n       display: flex;\n       justify-content: space-evenly;\n       align-items: center;\n       flex-wrap: wrap;\n       flex-direction: column;\n       z-index: 1;\n       /* shadow & background */\n       background-color: rgb(255, 254, 252);\n       box-shadow: 20px 20px 50px rgba(0,0,0,0.3);\n       /* border */\n       border-radius: 15px;\n       border-left: 1px solid rgba(255,255,255,0.5);\n       border-top: 1px solid rgba(255,255,255,0.5);\n   }\n   \n   .SignIn {\n       font-size: 25px;\n       font-weight: 550;\n   }\n   \n   .user {\n       height: 40px;\n       width: 247px;\n       padding-left: 15px;\n       line-height: 40px;\n   \n       color: rgb(128, 128, 128);\n       background-color: rgb(226, 226, 226);\n   \n       border-radius: 10px;\n   \n       transition: all 0.2s;\n   }\n   \n   .user:hover {\n       width: 260px;\n   }\n   \n   .user input {\n       font-size: 15px;\n       background-color: rgb(226, 226, 226);\n   }\n   \n   .loginBtn {\n       height: 40px;\n       width: 70px;\n       font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n       font-weight: 550;\n       font-size: 15px;\n   \n       color: azure;\n       background-color: rgb(70, 190, 237);\n   \n       border-radius: 10px;\n   \n       transition: all 0.2s;\n   }\n   \n   .loginBtn:hover {\n       width: 80px;\n       transform: translate(0px,2px);\n       cursor: pointer;\n   }\n   \n   .noAccount {\n       font-size: 12px;\n   }\n   \n   .register {\n       display: inline-block;\n       text-decoration: none;\n       color: rgb(21, 153, 201);\n   \n       transition: all 0.2s;\n   }\n   \n   .register:hover {\n       color: rgb(17, 109, 142);\n       transform: scale(1.05);\n   }\n   ```\n\n3. Create /Frontend/JS/index.js to define that button of \"login\" can send login AJAX request by axios to server:\n\n   ```javascript\n   const loginBtn=document.getElementById(\"loginBtn\");\n   const username=document.getElementById(\"username\");\n   const password=document.getElementById(\"password\");\n   const email=document.getElementById(\"email\");\n   axios.defaults.baseURL='http://127.0.0.1:2000';\n   loginBtn.addEventListener(\"click\",function(e){\n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:'/api/login',\n           //url parameters\n           params:{},\n           headers:{\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           //request body\n           data:`username=${username.value}&password=${password.value}`\n       }).then(res=>{\n           console.log(res.data.userinfo.username);\n           location.href=\"http://127.0.0.1:2000/home.html\"\n           sessionStorage.setItem('token',res.data.token);\n           sessionStorage.setItem('userinfo',JSON.stringify(res.data.userinfo));\n           alert(res.data.msg);\n       });\n   },false)\n   ```\n\n4. Finally, this page is shown as followed:\n\n   ![image-20220415100514714](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220415100514714.1pk8sajw4ijk.webp)\n\n\n\n### 2. Register Page\n\n1. Create */Frontend/register.html*. This page is almost the same as login page:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n       <head>\n           <meta charset=\"UTF-8\">\n           <title>register</title>\n           <meta name=\"description\" content=\"manage system based on Node\"/>\n           <meta name=\"keywords\" content=\"1,1,1\"/>\n           <link rel=\"stylesheet\" href=\"http://127.0.0.1:2000/CSS/register.css\">\n           <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js\"></script>\n       </head>\n       <body>\n           <div class=\"register\">\n               <div class=\"registerLogo\">Register</div>\n               <div class=\"user\">\n                   <input type=\"text\" id=\"username\" placeholder=\"username: \">\n               </div>\n               <div class=\"user\">\n                   <input type=\"password\" id=\"password\" placeholder=\"password: \">\n               </div>\n               <div class=\"user\">\n                   <input type=\"email\" id=\"email\" placeholder=\"email: \">\n               </div>\n               <button class=\"registerBtn\" id=\"registerBtn\">Register</button>\n           </div>\n       </body>\n       <script src=\"http://127.0.0.1:2000/JS/register.js\"></script>\n   </html>\n   ```\n\n2. Create /Frontend/CSS/register.css to customize the style:\n\n   ```css\n   * {\n       margin: 0;\n       padding: 0;\n       box-sizing: border-box;\n       border: none;\n       outline: none;\n       font-family: Verdana, Geneva, Tahoma, sans-serif;\n   }\n   li {\n       list-style: none;\n   }\n   \n   body {\n       min-height: 100vh;\n       display: flex;\n       justify-content: center;\n       align-items: center;\n       background: linear-gradient(45deg,rgb(104, 244, 247),rgb(251, 72, 48));\n   }\n   \n   .register {\n       /* size */\n       height: 340px;\n       width: 360px;\n       /* location and layout */\n       position: relative;\n       display: flex;\n       justify-content: space-evenly;\n       align-items: center;\n       flex-wrap: wrap;\n       flex-direction: column;\n       z-index: 1;\n       /* shadow & background */\n       background-color: rgb(255, 254, 252);\n       box-shadow: 20px 20px 50px rgba(0,0,0,0.3);\n       /* border */\n       border-radius: 15px;\n       border-left: 1px solid rgba(255,255,255,0.5);\n       border-top: 1px solid rgba(255,255,255,0.5);\n   }\n   \n   .registerLogo {\n       font-size: 25px;\n       font-weight: 550;\n   }\n   \n   .user {\n       height: 40px;\n       width: 247px;\n       padding-left: 15px;\n       line-height: 40px;\n   \n       color: rgb(128, 128, 128);\n       background-color: rgb(226, 226, 226);\n   \n       border-radius: 10px;\n   \n       transition: all 0.2s;\n   }\n   \n   .user:hover {\n       width: 260px;\n   }\n   \n   .user input {\n       font-size: 15px;\n       background-color: rgb(226, 226, 226);\n   }\n   \n   .registerBtn {\n       height: 40px;\n       width: 70px;\n       font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n       font-weight: 550;\n       font-size: 15px;\n   \n       color: azure;\n       background-color: rgb(70, 190, 237);\n   \n       border-radius: 10px;\n   \n       transition: all 0.2s;\n   }\n   \n   .registerBtn:hover {\n       width: 80px;\n       transform: translate(0px,2px);\n       cursor: pointer;\n   }\n   \n   .noAccount {\n       font-size: 12px;\n   }\n   \n   ```\n\n3. Create /Frontend/JS/register.js to send register AJAX request to server:\n\n   ```javascript\n   const registerBtn=document.getElementById(\"registerBtn\");\n   const username=document.getElementById(\"username\");\n   const password=document.getElementById(\"password\");\n   axios.defaults.baseURL='http://127.0.0.1:2000';\n   registerBtn.addEventListener(\"click\",function(e){\n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:'/api/register',\n           //url parameters\n           params:{},\n           headers:{\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           //request body\n           data:`username=${username.value}&password=${password.value}&email=${email.value}`\n       }).then(res=>{\n           alert(res.data.msg);\n           if(res.data.status===0)\n               history.back();\n       });\n   },false)\n   ```\n\n4. The register page looks like this:\n\n   ![image-20220415101147720](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220415101147720.6trw5l5f9bo0.webp)\n\n\n\n### 3. Blog Manage System Page\n\n#### 1. Introduction\n\nBlog Manage System Page is the main page of this project: \n\n![image-20220415101616577](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220415101616577.3k7bi3bnl9k0.webp)\n\nIt is divided into three parts:\n\n1. User Information Bar\n2. Categories Table\n3. Article Publishment Table\n\n#### 2. User Information Bar\n\n1. Create */Frontend/home.html*:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n       <head>\n           <meta charset=\"UTF-8\">\n           <title>home</title>\n           <meta name=\"description\" content=\"manage system based on Node\"/>\n           <meta name=\"keywords\" content=\"1,1,1\"/>\n           <link rel=\"stylesheet\" href=\"http://127.0.0.1:2000/CSS/home.css\">\n           <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js\"></script>\n       </head>\n       <body>\n           <!-- change pwd dialog -->\n           <dialog class=\"dialog\" id=\"dialogPwd\">\n               <div class=\"dialogHeader\">Change Password</div>\n               <div class=\"dialogContent\">\n                   <input type=\"password\" id=\"oldPwd\" placeholder=\"old password\">\n                   <input type=\"password\" id=\"newPwd\" placeholder=\"new password\">\n               </div>\n               <div class=\"dialogFooter\">\n                   <button class=\"dialogBtn\" id=\"pwdBtn_y\">Confirm</button>\n                   <button class=\"dialogBtn\" id=\"pwdBtn_n\">Cancel</button>\n               </div>\n           </dialog>\n           <div class=\"userinfoBar\">\n               <!--this image is the avatar, you can change its url-->\n               <img src=\"https://vignette.wikia.nocookie.net/warframe/images/4/46/Stalker_avatar.png/revision/latest?cb=20140806070139&path-prefix=ru\" class=\"userIcon\" alt=\"\">\n               <div class=\"userinfo\" id=\"userinfo\">\n                   <div class=\"username\"></div>\n                   <div class=\"nickname\"></div>\n                   <div class=\"email\"></div>\n                   <button class=\"changeInfoBtn\" id=\"changeInfoBtn\">Apply Changes</button>\n               </div>\n               <div class=\"changePwdBtn\" id=\"changePwdBtn\">Change Password</div>            \n           </div>\n       </body>\n       <script src=\"http://127.0.0.1:2000/JS/home.js\"></script>\n   </html>\n   ```\n\n2. Create /Frontend/CSS/home.css\n\n   ```javascript\n   *:not(dialog) {\n       margin: 0;\n       padding: 0;\n       box-sizing: border-box;\n       border: none;\n       outline: none;\n       font-family: Verdana, Geneva, Tahoma, sans-serif;\n       color: rgb(111, 111, 111);\n   }\n   li {\n       list-style: none;\n   }\n   button {\n       cursor: pointer;\n       transition: all 0.2s;\n   }\n   button:hover {\n       transform: scale(1.05);\n   }\n   \n   body {\n       position: relative;\n       min-height: 100vh;\n       /* display: flex;\n       justify-content: center;\n       align-items: center; */\n       background: linear-gradient(135deg,rgb(104, 244, 247),rgb(251, 72, 48));\n   }\n   \n   body::before {\n       content: \"\";\n       position: absolute;\n       top: 0;\n       left: 0;\n       width: 100%;\n       height: 100%;\n       background: rgba(245, 71, 52, 0.566);\n       clip-path: circle(40% at right 120%);\n   }\n   \n   body::after {\n       content: \"\";\n       position: absolute;\n       top: 0;\n       left: 0;\n       width: 100%;\n       height: 100%;\n       background: rgba(125, 236, 231, 0.273);\n       clip-path: circle(35% at 15% -7%);\n   }\n   \n   .userinfoBar {\n           /* size */\n           height: 100vh;\n           width: 350px;\n           /* location and layout */\n           position: absolute;\n           display: flex;\n           justify-content: space-evenly;\n           align-items: center;\n           flex-wrap: wrap;\n           flex-direction: column;\n           /* shadow & background */\n           background-color: rgba(255, 255, 255, 0.218);\n           box-shadow: 15px 15px 25px rgba(0,0,0,0.2);\n   \n           border-top-right-radius: 15px;\n           border-bottom-right-radius: 15px;\n   \n           backdrop-filter: blur(5px);\n   \n           z-index: 1;\n   }\n   \n   .userIcon {\n       width: 100px;\n       height: 100px;\n       display: flex;\n       border-radius: 50%;\n       border: 1px solid rgba(255, 255, 255, 0.575);\n       align-items: center;\n       justify-content: center;\n       overflow: hidden;\n   \n       transition: all 0.3s;\n   }\n   \n   .userIcon:hover {\n       transform: scale(1.3) rotate(360deg);\n   }\n   \n   .userinfo {\n       height: 230px;\n       width: 300px;\n       transform: translate(0,-70px);\n       background-color: rgba(237, 107, 107, 0);\n   \n       display: flex;\n       justify-content: space-evenly;\n       align-items: center;\n       flex-wrap: wrap;\n       flex-direction: column;\n   \n       border-top: 1px solid rgb(136, 136, 136);\n       border-bottom: 1px solid rgb(136, 136, 136);\n   }\n   \n   .userinfo input {\n       height: 35px;\n       padding-left: 10px;\n       font-size: 15px;\n       background-color: rgba(226, 226, 226, 0.351);\n       border-radius: 15px;\n   }\n   \n   .userinfo *{\n       transition: all 0.3s;\n   }\n   \n   .userinfo *:hover {\n       transform: scale(1.05);\n       cursor: pointer;\n   }\n   \n   .username {\n       font-size: 40px;\n       color:black;\n       font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n   }\n   \n   .nickname {\n       font-size: 20px;\n       color: black;\n   }\n   \n   .email {\n       font-size: 15px;\n       text-decoration: underline;\n   }\n   \n   .changeInfoBtn {\n       display: none;\n       height: 40px;\n       width: 130px;\n       font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n       font-weight: 550;\n       font-size: 15px;\n   \n       color: azure;\n       background-color: rgba(70, 192, 237, 0.334);\n       border-radius: 10px;\n   \n       transition: all 0.2s;\n   }\n   \n   .changeInfoBtn:hover {\n       width: 150px;\n       transform: translate(0px,2px);\n       background-color: rgba(232, 87, 54, 0.414);\n       cursor: pointer;\n   }\n   \n   .dialog {\n       position: relative;\n       height: 300px;\n       width: 250px;\n       padding: 0;\n       overflow: hidden;\n       border: 0;\n       border-top: 1px solid rgba(74, 74, 74, 0.519);\n       border-left: 1px solid rgba(63, 63, 63, 0.578);\n       border-radius: 15px;\n       box-shadow: 20px 20px 50px rgba(0,0,0,0.3);\n   }\n   \n   .dialog::backdrop {\n       background-color: rgba(129, 129, 129, 0.592);\n   }\n   \n   .dialogHeader {\n       height: 40px;\n       width: 250px;\n       background: linear-gradient(45deg,rgb(104, 244, 247),rgb(251, 72, 48));\n       color: white;\n       text-align: center;\n       line-height: 40px;\n   }\n   \n   .dialogContent {\n       height: 210px;\n       display: flex;\n       justify-content: space-evenly;\n       align-items: center;\n       flex-wrap: wrap;\n       flex-direction: column;\n   }\n   \n   .dialogContent input {\n       display: block;\n       height: 35px;\n       padding-left: 10px;\n       font-size: 15px;\n       background-color: rgba(226, 226, 226, 0.351);\n       color: black;\n       border-radius: 15px;\n   }\n   \n   .dialogFooter {\n       position: absolute;\n       top: 260px;\n       height: 50px;\n       width: 250px;\n       border-top: 1px solid rgb(194, 194, 194);\n       text-align: center;\n       line-height: 40px;\n   }\n   \n   .dialogBtn {\n       height: 21px;\n       margin: 10px;\n       width: 80px;\n       border-radius: 15px;\n       color: white;\n   }\n   \n   #pwdBtn_y {\n       background-color: rgb(148, 255, 86);\n   }\n   \n   #pwdBtn_n {\n       background-color: rgb(249, 52, 52);\n   }\n   \n   .changePwdBtn {\n       position: fixed;\n       top: 540px;\n       left: 220px;\n       font-size: 12px;\n       color: rgb(159, 159, 159);\n       cursor: pointer;\n   \n       transition: all 0.2s;\n   }\n   \n   .changePwdBtn:hover {\n       color: white;\n   }\n   ```\n\n4. Then you can check this static page, and the user information bar is shown below:\n\n   <img src=\"https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220415102623266.6fsqpt867cw0.webp\" alt=\"image-20220415102623266\" style=\"zoom:50%;\" />\n\n5. Create */Frontend/JS/home.js* to send get/update user information AJAX request and change password AJAX request:\n\n   ```javascript\n   const userinfo=document.getElementById(\"userinfo\");\n   const changeInfoBtn=document.getElementById(\"changeInfoBtn\")\n   axios.defaults.baseURL='http://127.0.0.1:2000';\n   const userinfoObj=JSON.parse(sessionStorage.getItem('userinfo'));\n   const dialogPwd=document.getElementById(\"dialogPwd\");\n   const pwdBtn_y=document.getElementById(\"pwdBtn_y\");\n   const pwdBtn_n=document.getElementById(\"pwdBtn_n\");\n   \n   let oldPwd=document.getElementById(\"oldPwd\");\n   let newPwd=document.getElementById(\"newPwd\");\n   \n   function iniInnerHTML(className){\n       document.getElementsByClassName(className)[0].innerHTML=userinfoObj[className]===null?`click to set ${className}`:userinfoObj[className];\n   }\n   \n   iniInnerHTML(\"username\");\n   iniInnerHTML(\"nickname\");\n   iniInnerHTML(\"email\");\n   \n   userinfo.addEventListener(\"click\",function(e){\n       if(e.target!==userinfo && e.target!==changeInfoBtn){\n           e.target.innerHTML=`<input type=\"text\" class=\"userInput\" value=${e.target.innerHTML}>`;\n           changeInfoBtn.style.display=\"block\";\n       }\n   },false)\n   \n   function getInfo(className){\n       let el=document.getElementsByClassName(className)[0];\n       if(el.firstElementChild===null)\n           return el.innerHTML;\n       else\n           return el.firstElementChild.value;\n   }\n   \n   changeInfoBtn.addEventListener (\"click\",function(e){\n       let username=getInfo(\"username\");\n       let nickname=getInfo(\"nickname\");\n       let email=getInfo(\"email\");\n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:'/my/userinfo',\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           //request body\n           data:`username=${username}&nickname=${nickname}&email=${email}`\n       }).then(res=>{\n           alert(res.data.msg);\n           sessionStorage.setItem('userinfo',JSON.stringify({username,nickname,email}));\n           location.reload();\n       });\n   },false)\n   \n   changePwdBtn.addEventListener(\"click\",function(){\n       dialogPwd.showModal();\n   },false)\n   \n   pwdBtn_n.addEventListener(\"click\",function(){\n       dialogPwd.close();\n       oldPwd.value='';\n       newPwd.value='';\n   })\n   \n   pwdBtn_y.addEventListener(\"click\",function(){\n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:'/my/updatePassword',\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           //request body\n           data:`oldPwd=${oldPwd.value}&newPwd=${newPwd.value}`\n       }).then(res=>{\n           alert(res.data.msg);\n           if(res.data.status==0){\n               dialogPwd.close();\n               oldPwd.value='';\n               newPwd.value='';\n           }        \n       });\n   })\n   ```\n\n#### 3. Categories Table\n\n1. Add codes below to body of */Frontend/home.html*:\n\n   ```html\n           <!-- update artcate dialog -->\n           <dialog class=\"dialog\" id=\"dialogArtcate\">\n               <div class=\"dialogHeader\" id=\"dialogHeader\"></div>\n               <div class=\"dialogContent\">\n                   <input type=\"text\" id=\"dialogArtcate_name\" placeholder=\"name\">\n                   <input type=\"text\" id=\"dialogArtcate_alias\" placeholder=\"alias\">\n               </div>\n               <div class=\"dialogFooter\">\n                   <button class=\"dialogBtn\" id=\"artcateBtn_y\">Confirm</button>\n                   <button class=\"dialogBtn\" id=\"artcateBtn_n\">Cancel</button>\n               </div>\n           </dialog>\n   \n   \t\t <div class=\"cateAndartArea\">\n               <ul class=\"optionBar\" id=\"optionBar\">\n                   <li class=\"option\" id=\"catalogsBtn\">categories</li>\n                   <li class=\"option\" id=\"articlesBtn\">articles</li>\n               </ul>\n               <!-- category area -->\n               <div class=\"artcates\" id=\"artcates\">\n               </div>\n               <div class=\"addcate\" id=\"addcateBtn\">+</div>\n               <!-- article area -->\n               <div class=\"articles\" id=\"articles\">\n               </div>\n           </div>\n   ```\n\n2. Add codes below to */Frontend/CSS/home.css* to define style of category table and option bar above it:\n\n   ```css\n    .cateAndartArea {\n       /* size */\n       height: 100vh;\n       width: calc(74% - 1px);\n       padding: 60px;\n       /* location and layout */\n       position: absolute;\n       left: 400px;\n       background-color: rgba(255, 255, 255, 0.234);\n       box-shadow: 15px 15px 25px rgba(0,0,0,0.2);\n   \n       border-top-left-radius: 15px;\n       border-bottom-left-radius: 15px;\n   \n       backdrop-filter: blur(15px);\n   \n       z-index: 1;\n   }\n   \n   .optionBar {\n       position: relative;\n       height: 30px;\n   \n       border-bottom: 1px solid rgb(136, 136, 136);\n   }\n   \n   .option {\n       position: relative;\n       padding: 3px 20px 1px;\n       margin-top: 2px;\n       margin-right: 5px;\n   \n       font-size: 18px;\n       float: left;\n   \n       background-color: transparent;\n       border-top-left-radius: 10px;\n       border-top-right-radius: 10px;\n   \n       border-bottom: 1px solid rgba(255, 255, 255, 0);\n       box-shadow: 2px 2px 5px rgba(0,0,0,0.2);\n   \n       transition: all 0.3s;\n   }\n   \n   .option:hover {\n       background-color: rgba(255, 255, 255, 0.349);\n       /* background: linear-gradient(45deg,rgba(255, 255, 255, 0),rgba(255, 255, 255, 0.479)); */\n       border-bottom: 1px solid rgba(255, 255, 255, 0);\n       cursor: pointer;\n   }\n   \n   .artcates {\n       overflow: hidden;\n       position: relative;\n       top: 10px;\n       box-shadow: 2px 2px 5px rgba(0,0,0,0.2);\n       border-left: 1px solid rgba(255, 255, 255, 0.427);\n       border-top: 1px solid rgba(255, 255, 255, 0.367);\n       border-radius: 8px;\n   }\n   \n   .addcate {\n       position: relative;\n       top: 20px;\n       left: 1000px;\n       height: 20px;\n       width: 20px;\n       text-align: center;\n       line-height: 15px;\n       color: white;\n       border: 1px solid rgb(255, 255, 255);\n       border-radius: 50%;\n       cursor: pointer;\n   \n       transition: all 0.3s;\n   }\n   \n   .addcate:hover {\n       transform: scale(1.2);\n   }\n   \n   .catelist {\n       height: 30px;\n       border-bottom: 1px solid rgba(146, 146, 146, 0.593);\n   }\n   \n   .catelist li {\n       height: 30px;\n       width: 337px;\n       float: left;\n       text-align: center;\n       line-height: 30px;\n   }\n   \n   .editBtn {\n       width: 50px;\n       padding: 2px;\n       border-radius: 5px;\n       background-color: rgb(53, 255, 27);\n       color: aliceblue;\n       text-align: center;\n   }\n   \n   .deleteBtn {\n       width: 50px;\n       padding: 2px;\n       border-radius: 5px;\n       background-color: rgb(255, 51, 51);\n       color: aliceblue;\n       text-align: center;\n   }\n   \n   #artcateBtn_y {\n       background-color: rgb(53, 255, 27);\n   }\n   \n   #artcateBtn_n {\n       background-color: rgb(255, 51, 51);\n   }\n   ```\n\n3. So this static page is finished:\n\n   ![image-20220415104458837](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image-20220415104458837.1kt438ryhyww.webp)\n\n4. Add codes below to */Frontend/JS/home.js* to ensure that user can switch between category table and article publishment table by clicking buttons on the top option bar:\n\n   ```javascript\n   //article option bar\n   const catalogsBtn=document.getElementById(\"catalogsBtn\");\n   const articlesBtn=document.getElementById(\"articlesBtn\");\n   const optionBar=document.getElementById(\"optionBar\");\n   \n   const artcates=document.getElementById(\"artcates\");\n   const articles=document.getElementById(\"articles\");\n   \n   const addcateBtn=document.getElementById(\"addcateBtn\");\n   \n   function deleteParentElement(Obj) {\n       Obj.parentNode.parentNode.parentNode.removeChild(Obj.parentNode.parentNode);\n   }\n   \n   articles.style.display=\"none\";\n   \n   optionBar.addEventListener(\"click\",function(e){\n       if(e.target.id==\"catalogsBtn\"){\n           artcates.style.display=\"block\";\n           addcateBtn.style.display=\"block\";\n           e.target.style.background=\"linear-gradient(45deg,rgba(255, 255, 255, 0.101),rgba(255, 255, 255, 0.6))\";\n           articlesBtn.style.removeProperty(\"background\");\n           getArtcates();\n   \n           articles.style.display=\"none\";\n       }\n       else if(e.target.id==\"articlesBtn\"){\n           articles.style.display=\"block\";\n           e.target.style.background=\"linear-gradient(45deg,rgba(255, 255, 255, 0.101),rgba(255, 255, 255, 0.6))\";\n           catalogsBtn.style.removeProperty(\"background\");\n   \n           artcates.style.display=\"none\";\n           addcateBtn.style.display=\"none\";\n       }\n   },false)\n   ```\n\n5. Then add codes below to */Frontend/JS/home.js* to ensure that buttons can send relative get/edit/delete categories AJAX request to backend:\n\n   ```javascript\n   //get artcates\n   const dialogArtcate=document.getElementById(\"dialogArtcate\");\n   //artcate dialog variables\n   const artcateBtn_y=document.getElementById(\"artcateBtn_y\");\n   const artcateBtn_n=document.getElementById(\"artcateBtn_n\");\n   const dialogArtcate_name=document.getElementById(\"dialogArtcate_name\");\n   const dialogArtcate_alias=document.getElementById(\"dialogArtcate_alias\");\n   const dialogHeader=document.getElementById(\"dialogHeader\");\n   \n   let artcatesData;\n   getArtcates();\n   \n   dialogArtcate.showUp=function(){\n       dialogArtcate_name.value='';\n       dialogArtcate_alias.value='';\n       dialogArtcate.showModal();\n   }\n   \n   //artcates, edit button and delete button\n   artcates.addEventListener(\"click\",function(e){\n       if(e.target.className===\"deleteBtn\"){\n           if(confirm(\"Do you really want to delete this category?\")){\n               deleteArtcate(e.target.id.match(/\\d+/)[0]);\n               deleteParentElement(e.target);\n           }\n       }\n       else if(e.target.className===\"editBtn\"){\n           dialogHeader.innerHTML=\"Edit Category\";\n           dialogArtcate.showUp();\n           artcateBtn_y.onclick=function(){\n               updateArtcate(e.target.id.match(/\\d+/)[0],dialogArtcate_name.value,dialogArtcate_alias.value);\n               e.target.parentNode.previousElementSibling.innerHTML=dialogArtcate_alias.value;\n               e.target.parentNode.previousElementSibling.previousElementSibling.innerHTML=dialogArtcate_name.value;\n               dialogArtcate.close();\n           }\n           artcateBtn_n.onclick=function(){\n               dialogArtcate.close();\n           }\n       }\n   },false)\n   \n   //arcates, add button\n   addcateBtn.addEventListener(\"click\",function(){\n       dialogHeader.innerHTML=\"Add Category\";\n       dialogArtcate.showUp();\n       artcateBtn_y.onclick=function(){\n           addArtcate(dialogArtcate_name.value,dialogArtcate_alias.value);\n           dialogArtcate.close();\n       }\n       artcateBtn_n.onclick=function(){\n           dialogArtcate.close();\n       }\n   },false)\n   \n   function createArtcateList(name,alias,num){\n       let catelist=document.createElement(\"ul\");\n       artcates.appendChild(catelist);\n       catelist.setAttribute(\"class\",\"catelist\");\n       catelist.innerHTML=`\n           <li>${name}</li>\n           <li>${alias}</li>\n           <li>\n               <button class=\"editBtn\" id=\"editBtn${num}\">Edit</button>\n               <button class=\"deleteBtn\" id=\"deleteBtn${num}\">Delete</button>\n           </li>`;\n   }\n   \n   function clearArtcateLists(){\n       artcates.innerHTML='';\n   }\n   \n   //requests of artcate\n   function getArtcates(){\n       axios({\n           //request method\n           method:'GET',\n           //url\n           url:'/my/article/cates',\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'application/x-www-form-urlencoded'\n           }\n       }).then(res=>{\n           clearArtcateLists();\n           artcatesData=res.data.data;\n           for(let el of artcatesData){\n               createArtcateList(el.name,el.alias,el.id);\n           }\n       });\n   }\n   \n   function deleteArtcate(id){\n       axios({\n           //request method\n           method:'GET',\n           //url\n           url:`/my/article/deletecates/${id}`,\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           data:`oldPwd=${oldPwd.value}&newPwd=${newPwd.value}`\n       }).then(res=>{\n           alert(res.data.msg);\n       });\n   }\n   \n   function updateArtcate(id,name,alias){\n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:`/my/article/updatecate`,\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           data:`id=${id}&name=${name}&alias=${alias}`\n       }).then(res=>{\n           alert(res.data.msg);\n       });\n   }\n   \n   function addArtcate(name,alias){\n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:`/my/article/addcate`,\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'application/x-www-form-urlencoded'\n           },\n           data:`&name=${name}&alias=${alias}`\n       }).then(res=>{\n           alert(res.data.msg);\n           if(res.data.status==0)\n               createArtcateList(name,alias,res.data.data.insertId);\n       });\n   }\n   ```\n\n#### 4. Article Publishment Table\n\n1. Update codes in article area in */Frontend/home.html* like this:\n\n   ```html\n               <!-- article area -->\n               <div class=\"articles\" id=\"articles\">\n                   <input type=\"text\" class=\"title\" id=\"title\" placeholder=\"Title\">\n                   <div class=\"artInfoBar\">\n                       <input type=\"text\" class=\"art_cate\" id=\"art_cate\" placeholder=\"input category\">\n                       <div class=\"sci\">cover image</div>\n                       <input type=\"file\" class=\"art_cover\" id=\"art_cover\" name=\"cover_img\">\n                   </div>\n                   <textarea class=\"content\" id=\"content\" cols=\"30\" rows=\"10\">Input your content</textarea>\n                   <button class=\"publishBtn\" id=\"publishBtn\">Publish</button>\n               </div>\n   ```\n\n2. Add contents below to */Frontend/CSS/home.css* to define style of article publishment table:\n\n   ```css\n   /* writing article area */\n   .articles {\n       position: relative;\n       top: 10px;\n       height: 630px;\n       width: 1010px;\n       padding: 30px;\n       /* text-align: center; */\n       background-color:rgba(255, 255, 255, 0.55);\n   \n       border-radius: 15px;\n       box-shadow: 5px 5px 16px rgb(255, 255, 255) inset;\n   }\n   \n   .title {\n       width: 950px;\n       padding-bottom: 10px;\n       text-align: center;\n       font-size: 30px;\n       color: black;\n       background-color: transparent;\n   }\n   \n   .artInfoBar {\n       width: 950px;\n       text-align: center;\n       padding-bottom: 4px;\n       border-bottom: 1px solid grey;\n   }\n   \n   .art_cate {\n       width: 130px;\n       font-size: 15px;\n       background-color: transparent;\n   }\n   \n   .sci {\n       display: inline;\n       font-size: 10px;\n       color: rgb(157, 157, 157);\n   }\n   \n   .art_cover {\n       width: 167px;\n   }\n   \n   .content {\n       margin-top: 10px;\n       width: 950px;\n       height: 480px;\n       font-size: 15px;\n       color: black;\n       background-color: transparent;\n   }\n   \n   .publishBtn {\n       position: relative;\n       left: 890px;\n       height: 20px;\n       padding-left: 4px;\n       padding-right: 4px;\n       color:white;\n       font-size: 10px;\n       background-color: rgb(252, 93, 35);\n       border-radius: 5px;\n   }\n   ```\n\n3. Add codes below to */Frontend/JS/home.js* so that the button \"Publish\" would send AJAX request when it is clicked:\n\n   ```javascript\n   //article publishment\n   const publishBtn=document.getElementById(\"publishBtn\");\n   const art_cover=document.getElementById(\"art_cover\");\n   const title=document.getElementById(\"title\");\n   const art_cate=document.getElementById(\"art_cate\");\n   const content=document.getElementById(\"content\");\n   \n   publishBtn.addEventListener(\"click\",function(){\n       //the AJAX request of publishment needs form data in request body\n       //so we use FormData object to generate a form data\n       const formData=new FormData();\n       //add data into it\n       formData.append(\"title\", title.value);\n       formData.append(\"cate\", art_cate.value);\n       formData.append(\"content\", content.value);\n       formData.append(\"state\", \"published\");\n       formData.append(\"cover_img\",art_cover.files[0]);\n   \n       axios({\n           //request method\n           method:'POST',\n           //url\n           url:`/my/article/add`,\n           //url parameters\n           params:{},\n           headers:{\n               'Authorization':sessionStorage.getItem('token'),\n               'content-type':'multipart/form-data'\n           },\n           //req.body\n           data:formData\n       }).then(res=>{\n           alert(res.data.msg);\n       });\n   },false)\n   ```\n\n\n4. Article publishment table is shown below:\n\n   ![image](https://raw.githubusercontent.com/ARIOS00/Image-Hosting-/main/img/image.1x2mjkeg24g0.webp)\n\n","tags":["JavaScript","Node.js","HTML","CSS"],"categories":["Projects"]}]